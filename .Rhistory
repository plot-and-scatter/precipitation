install.packages("KNITR")
install.packages(c("knitr", "1.2"))
</script>
install.packages("KernSmooth")
find.package("devtools")
library(devtools)
find_rtools()
library(KernSmooth)
install.packages("RMySQL")
ucscDB<-dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.uscsc.edu")
result<-dbGetQuery(ucscDb,"show database;"); dbDisconnect(ucscDb);
library(RMySQL)
ucscDB<-dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.uscsc.edu")
result<-dbGetQuery(ucscDb,"show database;"); dbDisconnect(ucscDb);
ucscDb<-dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.uscsc.edu")
result<-dbGetQuery(ucscDb,"show database;"); dbDisconnect(ucscDb);
ucscDb<-dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result<-dbGetQuery(ucscDb,"show database;"); dbDisconnect(ucscDb);
ucsdDb<-dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result<- dbGetQuery(ucscDb,"show database;"); dbDisconnect(ucscDb);
resul<-dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
hg19<-dbConnect(MySQL(),user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
allTables<-dbListTables(hg19)
length(allTables)
allTables[1:5]
allTables[1:5]
dbListFields(hg19,"affyU133Plus2") ##specific fiels in the genome
dbGetQuery(hg19,"select count(*) from affyU133Plus2")
affyData<-dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query<-dbSendQuery(hg19, "select* from affyU133Plus2 where misMatches between 1 and 3")
affyMis<-fetch(query); quantile(affyMis$misMatches)
affyMisSmall<-fetch(query, n=10);dbClearResult(query);
dim(affyMisSmall)
dbDisconnect(hg19)
source("http://bioconductor.org/bioLite.R")
biocLite("rhdf5")
source("http://bioconductor.org/bioLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
created=h5createdFile("example.h5")
created
library(rhdf5)
created=h5createdFile("example.h5")
created
created = h5createFile("example.h5")
created
created=h5createGroup("exampleh5","foo")
created=h5createGroup("example5", "baa")
created=h5createGroup("example5","foo/foobaa")
h51s("example.h5")
created=h5createGroup("example.h5","foo")
created=h5createGroup("example.h5", "baa")
created=h5createGroup("example.h5","foo/foobaa")
h51s("example.h5")
created=h5createGroup("example.h5","foo")
h51("example.h5")
h51s("example.h5")
h51s("example.h5")
h5ls("example.h5")
A = matrix(1:10,nr=5,nc=2)
h5write(A, "example.h5", "foo/A")
B= array(seq(0.1,2.0,by=0.1),dim=c(5,2,2))
attr(B,"scale")<-"liter"
h5write(B, "example.h5","foo/foobaa/B")
h5ls("example.h5")
df=data.frame(1L:5L,seq(0,1,length.out=5),
c("ab","cde","fghi","a","s"), stringsAsFactors=False)
h5write(df,"example.h5","df")
h5ls("example.h5")
df=data.frame(1L:5L,seq(0,1,length.out=5),
c("ab","cde","fghi","a","s"), stringsAsFactors=FALSE)
h5write(df,"example.h5","df")
h5ls("example.h5")
readA= h5read("example.h5","foo/A")
readB=h5read("example.h5","foo/foobaa/B")
readdf=h5read("example.h5", "df")
readA
h5write(c(12,13,14),"example.h5","foo/A",index=list(1:3:1))
h5write(c(12,13,14),"example.h5","foo/A",index=list(1:3,1))
h5read("example.h5", "foo/A")
con=url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode= readLines(con)
closed(con)
htmlCode
htmlCode= readLines(con)
close(con)
htmlCode
library(XML)
url<-"http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html<-htmlTreeParse(url, useInternalNodes=T)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//title", xmlValue)
xpathSApply(html, "//td[@id='col-citedyby']", xmlValue)
xpathSApply(html,"//td[@id'col-citedby']",xmlValue)
xpathSApply(html,"//td[@id='col-citedby']",xmlValue)
library(httr);html2=GET(url)
content2=content(html2,as="text")
parsedHTML= htmlParse(content2,asText=TRUE)
xpathSApply(parsedHtml,"//title", xmlValue)
xpathSApply(parsedHtml,"//title",xmlValue)
xpathSApply(parsedHtml, "//title", xmlValue)
xpathSApply(parsedHTML,"//title",xmlValue)
google=handle("http://google.com")
pg1=GET(handle=google,path="/")
pg2=GET(handle=google,path="search")
libray(httr)
library(httr)
setwd("~/Dropbox/dev/plot-and-scatter/R_precipitation") ##Set working directory
data<- read.csv("precipitation_data.csv", header = TRUE) ## Open file, and set as 'data'
yr2010<-data[1:12,] ##Subset for 2010
annual_mean10<-sapply(yr2010[,2:73], mean) ## Calculate annual mean for each station's actual and normal precipitation.
yr2011<-data[13:24,] ##Subset for 2011
annual_mean11<-sapply(yr2011[,2:73], mean) ## Calculate annual mean for each station's actual and normal precipitation.
yr2012<-data[25:36,] ##Subset for 2012
annual_mean12<-sapply(yr2012[,2:73], mean) ## Calculate annual mean for each station's actual and normal precipitation.
yr2013<-data[37:48,] ##Subset for 2012
annual_mean13<-sapply(yr2013[,2:73], mean) ## Calculate annual mean for each station's actual and normal precipitation.
yr2013
yr2014<-data[49:60,] ##Subset for 2012
annual_mean14<-sapply(yr2014[,2:73], mean) ## Calculate annual mean for each station's actual and normal precipitation.
yr2014
annual_mean13
annual_mean14
yrmean.data<- data.frame(annual_mean10, annual_mean11, annual_mean12, annual_mean13, annual_mean14, row.names = NULL)
yrmean.data<- data.frame(annual_mean10, annual_mean11, annual_mean12, annual_mean13, annual_mean14)
yrmean.data
annual_mean14
ncol(yrmean.data)
nrow(yrmean.data)
head(data)
ncol(data)
ncol(yrmean.data)
nrow(yrmean.data)
print(yrmean.data, digits=2)
print(yrmean.data, digits=4)
yrmean.data<- data.frame(annual_mean10, annual_mean11, annual_mean12, annual_mean13, annual_mean14(print(yrmean.data, digits = 4)))
yrmean.data<- data.frame(annual_mean10, annual_mean11, annual_mean12, annual_mean13, annual_mean14) {}
yrmean.data<- data.frame(annual_mean10, annual_mean11, annual_mean12, annual_mean13, annual_mean14) {
yrmean.data<- data.frame(annual_mean10, annual_mean11, annual_mean12, annual_mean13, annual_mean14) print(yrmean.data, digits=4)
yrmean.data<- data.frame(annual_mean10, annual_mean11, annual_mean12, annual_mean13, annual_mean14)
print(yrmean.data, digits=4)
write.csv(file = annual_means.csv, x=yrmean.data)
write.csv(file = annual_mean, x=yrmean.data)
yrmean.data<- data.frame(annual_mean10, annual_mean11, annual_mean12, annual_mean13, annual_mean14) #create a new data frame with annual means
yrmean.dec<-print(yrmean.data, digits=4) # print new data frame with only 2 decimals
yrmean.dec
write.table(yrmean.dec, file = "annual_means.csv", sep = ",", col.names = NA)
transpose<- setNames(data.frame(t(yrmean.dec[,-1])), yrmean.dec[,1])
transpose
row.names(transpose)
col.names(transpose)
t(yrmean.dec)
write.table(yrmean.dec, file = "annual_means_transposed.csv", sep=",", col.names = NA)
t(yrmean.dec)
class(yrmean.dec)
class(yrmean.dec[,1])
class(yrmean.dec[3,1:5])
class(yrmean.dec[3,5])
